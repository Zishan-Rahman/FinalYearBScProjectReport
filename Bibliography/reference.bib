@inproceedings{10.1007/978-3-030-63007-2_69,
    abstract  = {In this paper a comparison of selected algorithms used to procedurally generate terrain for video games is presented. The algorithms' performance is tested with two implementation environments: Unity and Godot. Results are aggregated and discussed. Conclusions drawn are of two types: intuitive and counter-intuitive.},
    address   = {Cham},
    author    = {Marek Kopel and Grzegorz Maciejewski},
    booktitle = {Computational Collective Intelligence},
    editor    = {Ngoc Thanh Nguyen and Bao Hung Hoang and Cong Phap Huynh and Dosam Hwang and Bogdan Trawi{\'n}ski and Gottfried Vossen},
    isbn      = {978-3-030-63007-2},
    pages     = {878--887},
    publisher = {Springer International Publishing},
    title     = {Comparison of Procedural Noise-Based Environment Generation Methods},
    url       = {https://link.springer.com/chapter/10.1007/978-3-030-63007-2_69},
    year      = {2020}
}
@inproceedings{10.1007/978-3-031-21671-8_6,
    abstract  = {Task environments developed in Minecraft are becoming increasingly popular for artificial intelligence (AI) research. However, most of these are currently constructed manually, thus failing to take advantage of procedural content generation (PCG), a capability unique to virtual task environments. In this paper, we present mcg, an open-source library to facilitate implementing PCG algorithms for voxel-based environments such as Minecraft. The library is designed with human-machine teaming research in mind, and thus takes a `top-down' approach to generation, simultaneously generating low and high level machine-readable representations that are suitable for empirical research. These can be consumed by downstream AI applications that consider human spatial cognition. The benefits of this approach include rapid, scalable, and efficient development of virtual environments, the ability to control the statistics of the environment at a semantic level, and the ability to generate novel environments in response to player actions in real time.},
    address   = {Cham},
    author    = {Adarsh Pyarelal and Aditya Banerjee and Kobus Barnard},
    booktitle = {Computational Theory of Mind for Human-Machine Teams},
    editor    = {Nikolos Gurney and Gita Sukthankar},
    isbn      = {978-3-031-21671-8},
    pages     = {85--101},
    publisher = {Springer Nature Switzerland},
    title     = {Modular Procedural Generation for Voxel Maps},
    year      = {2022}
}
@inproceedings{10.1007/978-3-642-37064-9_47,
    abstract  = {We investigate the boundary between finiteness and infiniteness in three types of L systems: 0L, DT0L, and T0L. We establish necessary and sufficient conditions for 0L, DT0L, and T0L systems to be infinite, and characterize the boundedness of finite classes of such systems. First, we give a pumping lemma for these systems, proving that the language of a system is infinite iff the system is pumpable. Next, we show that the number of steps needed to derive any string in any finite 0L or DT0L system is bounded by a function depending only on the size of the alphabet, and not on the production rules or start string. This alphabet boundedness does not hold for finite T0L systems in general. Finally, we show that every infinite 0L system has an infinite D0L subsystem.},
    address   = {Berlin, Heidelberg},
    author    = {Tim Smith},
    booktitle = {Language and Automata Theory and Applications},
    editor    = {Adrian-Horia Dediu and Carlos Mart{\'\i}n-Vide and Bianca Truthe},
    isbn      = {978-3-642-37064-9},
    pages     = {535--546},
    publisher = {Springer Berlin Heidelberg},
    title     = {Infiniteness and Boundedness in 0L, DT0L, and T0L Systems},
    year      = {2013}
}
@online{codatGD3LSystemGH,
    author = {Codat and contributors},
    month  = apr,
    note   = {[Online; accessed 10-April-2023]},
    title  = {An implementation of the rewriting system: Lindenmayer system. },
    url    = {https://github.com/codatproduction/Godots-L-System},
    year   = {2020}
}
@online{codatGD3LSystemYT,
    author = {Codat},
    title  = {Code that: L-System},
    url    = {https://youtu.be/eY9XkJERiG0},
    year   = {2020}
}
@online{codatGD4LSystemGH,
    author = {Codat and Zishan Rahman and contributors},
    month  = mar,
    note   = {[Online; accessed 10-April-2023]},
    title  = {An implementation of the rewriting system: Lindenmayer system. },
    url    = {https://github.com/Zishan-Rahman/Godots-L-System},
    year   = {2023}
}
@online{enwiki:1124510226,
    author = {{Wikipedia contributors}},
    note   = {[Online; accessed 23-February-2023]},
    title  = {L-system --- {Wikipedia}{,} The Free Encyclopedia},
    url    = {https://en.wikipedia.org/w/index.php?title=L-system&oldid=1124510226},
    year   = {2022}
}
@online{enwiki:1143473446,
    author = {{Wikipedia contributors}},
    note   = {[Online; accessed 10-April-2023]},
    title  = {Procedural generation --- {Wikipedia}{,} The Free Encyclopedia},
    url    = {https://en.wikipedia.org/w/index.php?title=Procedural_generation&oldid=1143473446},
    year   = {2023}
}
@article{freiknecht2017survey,
    author    = {Jonas Freiknecht and Wolfgang Effelsberg},
    journal   = {Multimodal Technologies and Interaction},
    number    = {4},
    pages     = {27},
    publisher = {MDPI},
    title     = {A survey on the procedural generation of virtual worlds},
    volume    = {1},
    year      = {2017}
}
@online{gd3perlinnoise,
    author = {Guilherme Oliveira},
    title  = {"Intro to Procedural Levels in Godot 3.1: Perlin Noise Tutorial"},
    url    = {https://youtu.be/m6mu4uPGrMk}
}
@online{gdblogsimplex,
    author = {Joan Fons},
    date   = {19},
    month  = sep,
    title  = {Simplex noise lands in Godot 3.1},
    url    = {https://godotengine.org/article/simplex-noise-lands-godot-31},
    year   = {2018}
}
@online{gddocsimplex,
    author = {others},
    title  = {OpenSimplexNoise},
    url    = {https://docs.godotengine.org/en/3.5/classes/class_opensimplexnoise.html}
}
@online{gdquest-repo,
    author = {Nathan Lovato et al.},
    title  = {Godot Procedural Generation},
    url    = {https://github.com/GDQuest/godot-procedural-generation}
}
@online{kccprocgenrepo,
    author = {Chris Bradfield et al.},
    title  = {Exploring Procedural Generation algorithms in Godot},
    url    = {https://github.com/kidscancode/godot3_procgen_demos}
}
@article{LINDENMAYER1968300,
    abstract = {Continuing the presentation of a theory of growth models for filamentous organisms, the treatment is extended to cases where inputs are received by each cell from both directions along the filament, and the change of state and the output of a cell is determined by its present state and the two inputs it receives. Further symbolism is introduced to take care of branching filaments as well. Two entirely different models are constructed for a particular branching organism, resembling one of the red algae. These models are compared with reference to the number of states employed, and the presence or absence of instructions for unequal divisions and for inductive relationships among the cells. The importance of a morphogenetic control theory concerning these relationships is emphasized.},
    author   = {Aristid Lindenmayer},
    doi      = {10.1016/0022-5193(68)90080-5},
    issn     = {0022-5193},
    journal  = {Journal of Theoretical Biology},
    number   = {3},
    pages    = {300--315},
    title    = {Mathematical models for cellular interactions in development II. Simple and branching filaments with two-sided inputs},
    url      = {https://www.sciencedirect.com/science/article/pii/0022519368900805},
    volume   = {18},
    year     = {1968}
}
@article{lsyspaulbourke,
    author = {Paul Bourke},
    month  = jul,
    title  = {L-System User Notes},
    url    = {http://paulbourke.net/fractals/lsys},
    year   = {1991}
}
@article{pcgvirtualworld,
    author  = {Freiknecht, Jonas and Effelsberg, Wolfgang},
    doi     = {10.3390/mti1040027},
    journal = {Multimodal Technologies and Interaction},
    month   = {10},
    pages   = {27},
    title   = {A Survey on the Procedural Generation of Virtual Worlds},
    volume  = {1},
    year    = {2017}
}
@online{pcgwiki,
    author    = {others},
    publisher = {Wikidot},
    title     = {Procedural Generation Wiki},
    url       = {http://pcg.wikidot.com/}
}
@online{spelunkyvid,
    author    = {Mark Brown},
    month     = apr,
    note      = {[Online-accessed 10-April-2023]},
    publisher = {YouTube},
    title     = { How (and Why) Spelunky Makes its Own Levels},
    url       = {https://youtu.be/Uqk5Zf0tw3o},
    year      = {2016}
}
@online{teleonto,
    author    = {Mick West},
    publisher = {Gamasutra},
    title     = {Random Scattering: Creating Realistic Landscapes},
    url       = {http://web.archive.org/web/20080826103432/http://www.gamasutra.com/view/feature/1648/random_scattering_creating_.php?page=2}
}
