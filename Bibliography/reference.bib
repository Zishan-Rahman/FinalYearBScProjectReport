@inproceedings{10.1007/978-3-030-63007-2_69,
    abstract  = {In this paper a comparison of selected algorithms used to procedurally generate terrain for video games is presented. The algorithms' performance is tested with two implementation environments: Unity and Godot. Results are aggregated and discussed. Conclusions drawn are of two types: intuitive and counter-intuitive.},
    address   = {Cham},
    author    = {Marek Kopel and Grzegorz Maciejewski},
    booktitle = {Computational Collective Intelligence},
    editor    = {Ngoc Thanh Nguyen and Bao Hung Hoang and Cong Phap Huynh and Dosam Hwang and Bogdan Trawi{\'n}ski and Gottfried Vossen},
    isbn      = {978-3-030-63007-2},
    pages     = {878--887},
    publisher = {Springer International Publishing},
    title     = {Comparison of Procedural Noise-Based Environment Generation Methods},
    url       = {https://link.springer.com/chapter/10.1007/978-3-030-63007-2_69},
    year      = {2020}
}
@inproceedings{10.1007/978-3-031-21671-8_6,
    abstract  = {Task environments developed in Minecraft are becoming increasingly popular for artificial intelligence (AI) research. However, most of these are currently constructed manually, thus failing to take advantage of procedural content generation (PCG), a capability unique to virtual task environments. In this paper, we present mcg, an open-source library to facilitate implementing PCG algorithms for voxel-based environments such as Minecraft. The library is designed with human-machine teaming research in mind, and thus takes a `top-down' approach to generation, simultaneously generating low and high level machine-readable representations that are suitable for empirical research. These can be consumed by downstream AI applications that consider human spatial cognition. The benefits of this approach include rapid, scalable, and efficient development of virtual environments, the ability to control the statistics of the environment at a semantic level, and the ability to generate novel environments in response to player actions in real time.},
    address   = {Cham},
    author    = {Adarsh Pyarelal and Aditya Banerjee and Kobus Barnard},
    booktitle = {Computational Theory of Mind for Human-Machine Teams},
    editor    = {Nikolos Gurney and Gita Sukthankar},
    isbn      = {978-3-031-21671-8},
    pages     = {85--101},
    publisher = {Springer Nature Switzerland},
    title     = {Modular Procedural Generation for Voxel Maps},
    year      = {2022}
}
@inproceedings{10.1007/978-3-642-37064-9_47,
    abstract  = {We investigate the boundary between finiteness and infiniteness in three types of L systems: 0L, DT0L, and T0L. We establish necessary and sufficient conditions for 0L, DT0L, and T0L systems to be infinite, and characterize the boundedness of finite classes of such systems. First, we give a pumping lemma for these systems, proving that the language of a system is infinite iff the system is pumpable. Next, we show that the number of steps needed to derive any string in any finite 0L or DT0L system is bounded by a function depending only on the size of the alphabet, and not on the production rules or start string. This alphabet boundedness does not hold for finite T0L systems in general. Finally, we show that every infinite 0L system has an infinite D0L subsystem.},
    address   = {Berlin, Heidelberg},
    author    = {Tim Smith},
    booktitle = {Language and Automata Theory and Applications},
    editor    = {Adrian-Horia Dediu and Carlos Mart{\'\i}n-Vide and Bianca Truthe},
    isbn      = {978-3-642-37064-9},
    pages     = {535--546},
    publisher = {Springer Berlin Heidelberg},
    title     = {Infiniteness and Boundedness in 0L, DT0L, and T0L Systems},
    year      = {2013}
}
@inproceedings{10.1145/122718.122736,
    abstract  = {Nonuniform sampling of images is a useful technique in computer graphics, because a properly designed pattern of samples can make aliasing take the form of high-frequency random noise. In this paper, the technique of nonuniform sampling is extended from two dimensions to include the extra parameter dimensions of distribution ray tracing. A condition for optimality is suggested, and algorithms for approximating optimal sampling are developed. The technique is demonstrated at low sampling densities, so the characteristics of aliasing noise are clearly visible. At supersampling rates, this technique should move noise into frequencies above the passband of the pixel-reconstruction filter.},
    address   = {New York, NY, USA},
    author    = {Mitchell, Don P.},
    booktitle = {Proceedings of the 18th Annual Conference on Computer Graphics and Interactive Techniques},
    doi       = {10.1145/122718.122736},
    isbn      = {0897914368},
    keywords  = {distribution Ray tracing, nonuniform sampling, noise perception, antialiasing},
    numpages  = {8},
    pages     = {157–164},
    publisher = {Association for Computing Machinery},
    series    = {SIGGRAPH '91},
    title     = {Spectrally Optimal Sampling for Distribution Ray Tracing},
    url       = {https://doi.org/10.1145/122718.122736},
    year      = {1991}
}
@article{10.1145/127719.122736,
    abstract   = {Nonuniform sampling of images is a useful technique in computer graphics, because a properly designed pattern of samples can make aliasing take the form of high-frequency random noise. In this paper, the technique of nonuniform sampling is extended from two dimensions to include the extra parameter dimensions of distribution ray tracing. A condition for optimality is suggested, and algorithms for approximating optimal sampling are developed. The technique is demonstrated at low sampling densities, so the characteristics of aliasing noise are clearly visible. At supersampling rates, this technique should move noise into frequencies above the passband of the pixel-reconstruction filter.},
    address    = {New York, NY, USA},
    author     = {Mitchell, Don P.},
    doi        = {10.1145/127719.122736},
    issn       = {0097-8930},
    issue_date = {July 1991},
    journal    = {SIGGRAPH Comput. Graph.},
    keywords   = {distribution Ray tracing, antialiasing, nonuniform sampling, noise perception},
    month      = {jul},
    number     = {4},
    numpages   = {8},
    pages      = {157–164},
    publisher  = {Association for Computing Machinery},
    title      = {Spectrally Optimal Sampling for Distribution Ray Tracing},
    url        = {https://doi.org/10.1145/127719.122736},
    volume     = {25},
    year       = {1991}
}
@inproceedings{10.1145/1278780.1278807,
    abstract  = {In many applications in graphics, particularly rendering, generating samples from a blue noise distribution is important. However, existing efficient techniques do not easily generalize beyond two dimensions. Here I demonstrate a simple modification to dart throwing which permits generation of Poisson disk samples in O(N) time, easily implemented in arbitrary dimension.},
    address   = {New York, NY, USA},
    author    = {Bridson, Robert},
    booktitle = {ACM SIGGRAPH 2007 Sketches},
    doi       = {10.1145/1278780.1278807},
    isbn      = {9781450347266},
    keywords  = {Poisson disk, blue noise, sampling},
    location  = {San Diego, California},
    pages     = {22–es},
    publisher = {Association for Computing Machinery},
    series    = {SIGGRAPH '07},
    title     = {Fast Poisson Disk Sampling in Arbitrary Dimensions},
    url       = {https://doi.org/10.1145/1278780.1278807},
    year      = {2007}
}
@inproceedings{10.1145/1964921.1964944,
    abstract  = {We solve the problem of generating a uniform Poisson-disk sampling that is both maximal and unbiased over bounded non-convex domains. To our knowledge this is the first provably correct algorithm with time and space dependent only on the number of points produced. Our method has two phases, both based on classical dart-throwing. The first phase uses a background grid of square cells to rapidly create an unbiased, near-maximal covering of the domain. The second phase completes the maximal covering by calculating the connected components of the remaining uncovered voids, and by using their geometry to efficiently place unbiased samples that cover them. The second phase converges quickly, overcoming a common difficulty in dart-throwing methods. The deterministic memory is O(n) and the expected running time is O(n log n), where n is the output size, the number of points in the final sample. Our serial implementation verifies that the log n dependence is minor, and nearly O(n) performance for both time and memory is achieved in practice. We also present a parallel implementation on GPUs to demonstrate the parallel-friendly nature of our method, which achieves 2.4x the performance of our serial version.},
    address   = {New York, NY, USA},
    articleno = {49},
    author    = {Ebeida, Mohamed S. and Davidson, Andrew A. and Patney, Anjul and Knupp, Patrick M. and Mitchell, Scott A. and Owens, John D.},
    booktitle = {ACM SIGGRAPH 2011 Papers},
    doi       = {10.1145/1964921.1964944},
    isbn      = {9781450309431},
    keywords  = {sampling, linear complexity, blue noise, provable convergence, Poisson disk, maximal},
    location  = {Vancouver, British Columbia, Canada},
    numpages  = {12},
    publisher = {Association for Computing Machinery},
    series    = {SIGGRAPH '11},
    title     = {Efficient Maximal Poisson-Disk Sampling},
    url       = {https://doi.org/10.1145/1964921.1964944},
    year      = {2011}
}
@online{codatGD3LSystemGH,
    author = {Codat and contributors},
    month  = apr,
    note   = {[Online; accessed 10-April-2023]},
    title  = {An implementation of the rewriting system: Lindenmayer system. },
    url    = {https://github.com/codatproduction/Godots-L-System},
    year   = {2020}
}
@online{codatGD3LSystemYT,
    author = {Codat},
    title  = {Code that: L-System},
    url    = {https://youtu.be/eY9XkJERiG0},
    year   = {2020}
}
@online{codatGD4LSystemGH,
    author = {Codat and Zishan Rahman and contributors},
    month  = mar,
    note   = {[Online; accessed 10-April-2023]},
    title  = {An implementation of the rewriting system: Lindenmayer system. },
    url    = {https://github.com/Zishan-Rahman/Godots-L-System},
    year   = {2023}
}
@online{enwiki:1102898483,
    author = {{Wikipedia contributors}},
    note   = {[Online; accessed 16-April-2023]},
    title  = {OpenSimplex noise --- {Wikipedia}{,} The Free Encyclopedia},
    url    = {https://en.wikipedia.org/w/index.php?title=OpenSimplex_noise&oldid=1102898483},
    year   = {2022}
}
@online{enwiki:1124510226,
    author = {{Wikipedia contributors}},
    note   = {[Online; accessed 23-February-2023]},
    title  = {L-system --- {Wikipedia}{,} The Free Encyclopedia},
    url    = {https://en.wikipedia.org/w/index.php?title=L-system&oldid=1124510226},
    year   = {2022}
}
@online{enwiki:1143473446,
    author = {{Wikipedia contributors}},
    note   = {[Online; accessed 10-April-2023]},
    title  = {Procedural generation --- {Wikipedia}{,} The Free Encyclopedia},
    url    = {https://en.wikipedia.org/w/index.php?title=Procedural_generation&oldid=1143473446},
    year   = {2023}
}
@online{fastnoiselitedocs,
    author   = {Juan Linietsky and Ariel Manzur and the Godot community},
    keywords = {[Online, Accessed 16-April-2023, License CC-BY-3.0]},
    title    = {FastNoiseLite — Godot Engine (stable) documentation in English},
    url      = {https://docs.godotengine.org/en/4.0/classes/class_fastnoiselite.html}
}
@article{freiknecht2017survey,
    author    = {Jonas Freiknecht and Wolfgang Effelsberg},
    journal   = {Multimodal Technologies and Interaction},
    number    = {4},
    pages     = {27},
    publisher = {MDPI},
    title     = {A survey on the procedural generation of virtual worlds},
    volume    = {1},
    year      = {2017}
}
@online{gd3perlinnoise,
    author = {Guilherme Oliveira},
    title  = {``Intro to Procedural Levels in Godot 3.1: Perlin Noise Tutorial"},
    url    = {https://youtu.be/m6mu4uPGrMk}
}
@online{gdblogsimplex,
    author = {Joan Fons},
    date   = {19},
    month  = sep,
    title  = {Simplex noise lands in Godot 3.1},
    url    = {https://godotengine.org/article/simplex-noise-lands-godot-31},
    year   = {2018}
}
@online{gddocsimplex,
    author = {Various contributors},
    title  = {OpenSimplexNoise},
    url    = {https://docs.godotengine.org/en/3.5/classes/class_opensimplexnoise.html}
}
@online{gdquest-repo,
    author = {{Nathan Lovato} and contributors},
    title  = {Godot Procedural Generation},
    url    = {https://github.com/GDQuest/godot-procedural-generation}
}
@online{gingergd3tutorialGH,
    author = {Gingerageous Games},
    month  = mar,
    note   = {[Online, Accessed 11-March-2023]},
    title  = {OpenSimplexNoiseTilemapTutorial},
    url    = {https://github.com/gingerageous/OpenSimplexNoiseTilemapTutorial},
    year   = {2020}
}
@online{gingergd3tutorialYT,
    author = {Gingerageous Games},
    month  = aug,
    note   = {[Online, Accessed 11-March-2023]},
    title  = {AutoTiles OpenSimplex Noise Procedural Generation Godot 3.1 Tutorial},
    url    = {https://youtu.be/SBDs8hbs43w},
    year   = {2019}
}
@online{gradientvalue,
    author = {Hernan J. González},
    month  = aug,
    note   = {[Online, Accessed 16-April-2023, Stack Exchange Username ``leonbloy"]},
    title  = {``Why is gradient noise better quality than value noise?" - Stack Exckange Answer},
    url    = {https://math.stackexchange.com/a/184153},
    year   = {2012}
}
@online{kccprocgenrepo,
    author = {{Chris Bradfield} and contributors},
    title  = {Exploring Procedural Generation algorithms in Godot},
    url    = {https://github.com/kidscancode/godot3_procgen_demos}
}
@online{kenneyassetsused,
    author    = {Kenney},
    month     = nov,
    note      = {[Online, Accessed 23-March-2023, License CC0-1.0]},
    publisher = {Kenney.nl},
    title     = {1-Bit Pack (Version 1.2)},
    url       = {https://kenney.nl/assets/1-bit-pack},
    year      = {2021}
}
@article{LINDENMAYER1968300,
    abstract = {Continuing the presentation of a theory of growth models for filamentous organisms, the treatment is extended to cases where inputs are received by each cell from both directions along the filament, and the change of state and the output of a cell is determined by its present state and the two inputs it receives. Further symbolism is introduced to take care of branching filaments as well. Two entirely different models are constructed for a particular branching organism, resembling one of the red algae. These models are compared with reference to the number of states employed, and the presence or absence of instructions for unequal divisions and for inductive relationships among the cells. The importance of a morphogenetic control theory concerning these relationships is emphasized.},
    author   = {Aristid Lindenmayer},
    doi      = {10.1016/0022-5193(68)90080-5},
    issn     = {0022-5193},
    journal  = {Journal of Theoretical Biology},
    number   = {3},
    pages    = {300--315},
    title    = {Mathematical models for cellular interactions in development II. Simple and branching filaments with two-sided inputs},
    url      = {https://www.sciencedirect.com/science/article/pii/0022519368900805},
    volume   = {18},
    year     = {1968}
}
@article{lsyspaulbourke,
    author = {Paul Bourke},
    month  = jul,
    title  = {L-System User Notes},
    url    = {http://paulbourke.net/fractals/lsys},
    year   = {1991}
}
@online{lsystemintro,
    author = {Gabriela Ochoa},
    month  = feb,
    note   = {[Online; accessed 11-April-2023]},
    title  = {An Introduction to Lindenmayer Systems: D0L-System},
    url    = {https://www1.biologie.uni-hamburg.de/b-online/e28_3/lsys.html#D0L-system},
    year   = {1998}
}
@online{opensimplex,
    author = {KdotJPG and contributors},
    note   = {[Online, Accessed 17-April-2023]},
    title  = {OpenSimplexNoise},
    url    = {https://github.com/KdotJPG/OpenSimplex2},
    year   = {2014-present}
}
@article{pcgvirtualworld,
    author  = {Freiknecht, Jonas and Effelsberg, Wolfgang},
    doi     = {10.3390/mti1040027},
    journal = {Multimodal Technologies and Interaction},
    month   = {10},
    pages   = {27},
    title   = {A Survey on the Procedural Generation of Virtual Worlds},
    volume  = {1},
    year    = {2017}
}
@online{pcgwikiperlin,
    author    = {Various contributors},
    keywords  = {[Online, Accessed 23-March-2023]},
    publisher = {Wikidot},
    title     = {Perlin Noise - Procedural Content Generation Wiki},
    url       = {http://pcg.wikidot.com/pcg-algorithm:perlin-noise}
}
@online{pcgwikisimplex,
    author    = {Various contributors},
    keywords  = {[Online, Accessed 23-March-2023]},
    publisher = {Wikidot},
    title     = {Simplex Noise - Procedural Content Generation Wiki},
    url       = {http://pcg.wikidot.com/pcg-algorithm:simplex-noise}
}
@online{pcgwikivoronoi,
    author    = {Various contributors},
    keywords  = {[Online, Accessed 23-March-2023]},
    publisher = {Wikidot},
    title     = {Voronoi Diagram - Procedural Content Generation Wiki},
    url       = {http://pcg.wikidot.com/pcg-algorithm:voronoi-diagram}
}
@online{pdshistory,
    author = {Philippe Rivière and Jacob Rus},
    month  = jun,
    note   = {[Online, Accessed 17-April-2023]},
    title  = {Poisson disk sampling functions},
    url    = {https://observablehq.com/@fil/poisson-distribution-generators},
    year   = {2022}
}
@online{pdsimprovementroberts,
    author    = {Martin Roberts},
    month     = nov,
    note      = {[Online, Accessed 17-April-2023]},
    publisher = {Extreme Learning},
    title     = {Maximal Poisson disk sampling: an improved version of Bridson’s algorithm},
    url       = {http://extremelearning.com.au/an-improved-version-of-bridsons-algorithm-n-for-poisson-disc-sampling/},
    year      = {2019}
}
@online{pdsimprovementrus,
    author    = {Jacob Rus},
    month     = jun,
    note      = {[Online, Accessed 17-April-2023]},
    publisher = {Observable},
    title     = {A Fork of Roberts’s Tweak to Bridson's Algorithm for Poisson Disc sampling.},
    url       = {https://observablehq.com/@jrus/bridson-fork/2},
    year      = {2022}
}
@misc{perlinpatent,
    author       = {Kenneth H. Perlin},
    howpublished = {\url{https://patents.google.com/patent/US6867776}},
    month        = jan,
    note         = {[Online patent document, Accessed 16-April-2023]},
    title        = {Standard for perlin noise},
    year         = {2002}
}
@online{perlinvalue,
    author = {Timm (Stack Exchange Contributor)},
    month  = jun,
    note   = {[Online, Accessed 16-April-2023]},
    title  = {``benefit of perlin noise over value noise" - Stack Exchange Answer},
    url    = {https://computergraphics.stackexchange.com/a/3609},
    year   = {2016}
}
@online{projectsettingsdocs,
    author = {Juan Linietsky and Ariel Manzur and the Godot community},
    note   = {[Online, Accessed 16-April-2023, GDScript Warnings Classed as Properties, License CC-BY-3.0]},
    title  = {ProjectSettings — Godot Engine (stable) documentation in English},
    url    = {https://docs.godotengine.org/en/4.0/classes/class_projectsettings.html#properties}
}
@online{pygamepoissondisksampling,
    author = {Joseph Bakulikira},
    note   = {[Online; accessed 15-April-2023]},
    title  = {Poisson Disc Sampling in pygame},
    url    = {https://github.com/Josephbakulikira/Poisson-Disc-Sampling-with-pygame}
}
@article{reffortesselations,
    author  = {Strößner, Corina},
    doi     = {10.1007/s11229-022-03610-4},
    journal = {Synthese},
    month   = {04},
    pages   = {},
    title   = {Criteria for naturalness in conceptual spaces},
    volume  = {200},
    year    = {2022}
}
@online{seblaguetuteGH,
    author    = {Sebastian Lague},
    month     = nov,
    note      = {[Online, Accessed 11-April-2023, License MIT]},
    publisher = {YouTube},
    title     = {Poisson-Disc-Sampling},
    url       = {https://github.com/SebLague/Poisson-Disc-Sampling},
    year      = {2018-2020}
}
@online{seblaguetuteYT,
    author    = {Sebastian Lague},
    month     = nov,
    note      = {[Online, Accessed 11-April-2023]},
    publisher = {YouTube},
    title     = {[Unity] Procedural Object Placement (E01: poisson disc sampling)},
    url       = {https://youtu.be/7WcmyxyFO7o},
    year      = {2018}
}
@online{simplexarticle1,
    author = {Michael Powell},
    month  = jan,
    note   = {[Online, Accessed 17-April-2023]},
    title  = {Spirit of Iron: Simplectic Noise},
    url    = {https://web.archive.org/web/20160404092918/http://www.spiritofiron.com/2015/01/simplectic-noise.html},
    year   = {2015}
}
@online{simplexarticle2,
    author = {KDotJPG},
    month  = sep,
    note   = {[Online, Accessed 17-April-2023]},
    title  = {Noise!},
    url    = {https://web.archive.org/web/20160529190516/http://uniblock.tumblr.com/post/97868843242/noise},
    year   = {2014}
}
@online{spelunkyvid,
    author    = {Mark Brown},
    month     = apr,
    note      = {[Online-accessed 10-April-2023]},
    publisher = {YouTube},
    title     = {How (and Why) Spelunky Makes its Own Levels},
    url       = {https://youtu.be/Uqk5Zf0tw3o},
    year      = {2016}
}
@online{teleonto,
    author    = {Mick West},
    publisher = {Gamasutra},
    title     = {Random Scattering: Creating Realistic Landscapes},
    url       = {http://web.archive.org/web/20080826103432/http://www.gamasutra.com/view/feature/1648/random_scattering_creating_.php?page=2}
}
@online{whitenoisepicgen,
    author = {Robson},
    month  = apr,
    note   = {[Online, Accessed 16-April-2023]},
    title  = {An interactive webpage for generating images that simulate white noise.},
    url    = {https://robson.plus/white-noise-image-generator/},
    year   = {2021}
}
